<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- 
  namespace => 인터페이스의 패키지 및 이름과 일치해야 한다.
 -->
<mapper namespace="com.bitproject.dao.StoreDao">

  <!-- 테이블의 컬럼과 객체 필드를 연결한다. -->
  <resultMap type="store" id="storeMap">
    <id column="store_no" property="storeNo"/>
    <result column="business_registration_no" property="businessRegistrationNo"/>
    <result column="business_registration" property="businessRegistration"/>
    <result column="store_name" property="storeName"/>
    <result column="address" property="address"/>
    <result column="tel" property="tel"/>
    <result column="hour" property="hour"/>
    <result column="introduction" property="introduction"/>
    <result column="evaluation_score" property="evaluationScore"/>
    <result column="reservation_accept" property="reservationAccept"/>
    <result column="max_member" property="maxMember"/>
    <result column="lat" property="lat"/>
    <result column="lng" property="lng"/>
    <result column="place_id" property="placeId"/>
    <result column="oper" property="oper"/>
    <result column="status" property="status"/>
  </resultMap>

  <!-- 
    id => 인터페이스의 메서드 이름과 일치해야 한다.
   -->
  <select id="findAll" resultMap="storeMap">
    select 
      s.store_no,
      s.business_registration_no,
      s.business_registration,
      s.store_name,
      s.address,
      s.tel,
      s.hour,
      s.introduction,
      s.evaluation_score,
      s.reservation_accept,
      s.max_member,
      s.lat,
      s.lng,
      s.place_id,
      s.oper,
      s.status,
      st.store_type_no,
      ss.mno
      <!--(SELECT tag.name
            FROM tag t
           WHERE t.tag_no = stag.tag_no) AS tagName -->
    from
    	store s
    	left outer join store_section_type st on s.store_no=st.store_no
    	left outer join store_select ss on s.store_no=ss.store_no
    	<!-- inner join store_tag stag on s.store_no=stag.store_no,
    	tag -->
    order by 
      s.store_no desc;
  </select>
  
  <insert id="insert" parameterType="Store" >
    insert into store(
      business_registration_no,
      business_registration,
      store_name,
      address,
      tel,
      hour,
      introduction,
      evaluation_score,
      reservation_accept,
      max_member,
      lat,
      lng,
      place_id,
      oper,
      status
      )
      values(
     #{businessRegistrationNo},
     #{businessRegistration},
     #{storeName},
     #{address},
     #{tel},
     #{hour},
     #{introduction},
     #{evaluationScore},
     #{reservationAccept},
     #{maxMember},
     #{lat},
     #{lng},
     #{placeId},
     #{oper},
     #{status}
     )
  </insert>


	<select id="findByNo" resultMap="storeMap" parameterType="int">
    select
      s.store_no, 
      s.business_registration_no,
      s.business_registration,
      s.store_name,
      s.address,
      s.tel,
      s.hour,
      s.introduction,
      s.evaluation_score,
      s.reservation_accept,
      s.max_member,
      s.lat,
      s.lng,
      s.place_id,
      s.oper,
      s.status,
      <!-- ( SELECT t.name
            FROM tag t
           WHERE t.tag_no = stag.tag_no ) AS tagName-->
    from
      store s
      <!--inner join store_tag stag on s.store_no=stag.store_no,
      tag-->
    where 
      s.store_no=#{no}
  </select>

  <update id="update" parameterType="Store">
    update store set
      business_registration_no=#{businessRegistrationNo}, 
      business_registration=#{businessRegistration},
      store_name=#{storeName},
      address=#{address},
      tel=#{tel},
      hour=#{hour},
      introduction=#{introduction},
      evaluation_score=#{evaluationScore},
      reservation_accept=#{reservationAccept},
      max_member=#{maxMember},
      lat=#{lat},
      lng=#{lng},
      place_id=#{placeId},
      oper=#{oper},
      status=#{status}
    where 
      store_no=#{storeNo}
  </update>

  <delete id="delete" parameterType="int">
    delete from store 
    where store_no=#{storeNo}
  </delete>

</mapper>








